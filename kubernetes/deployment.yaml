apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app
  labels:
    app: demo-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: demo-app
  template:
    metadata:
      labels:
        app: demo-app
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8443"
        linkerd.io/inject: enabled
        config.linkerd.io/proxy-cpu-request: "0.2"
        config.linkerd.io/proxy-memory-request: "128Mi"
    spec:
      serviceAccountName: demo-app-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - demo-app
              topologyKey: kubernetes.io/hostname
      containers:
      - name: demo-app
        image: 123456789012.dkr.ecr.us-east-1.amazonaws.com/demo-app:latest
        imagePullPolicy: Always
        command: ["/bin/sh"]
        args: 
        - -c
        - |
          source /mnt/secrets-store && exec python app.py
        envFrom:
        - secretRef:
            name: db-credentials
        ports:
        - containerPort: 8443
          name: https
        env:
        - name: SSL_CERT_PATH
          value: "/etc/ssl/certs/tls.crt"
        - name: SSL_KEY_PATH
          value: "/etc/ssl/private/tls.key"
        volumeMounts:
        - name: ssl-certs
          mountPath: "/etc/ssl/certs"
          readOnly: true
        - name: ssl-keys
          mountPath: "/etc/ssl/private"
          readOnly: true
        - name: secrets-store
          mountPath: "/mnt/secrets-store"
          readOnly: true
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "200m"
            memory: "256Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8443
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8443
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
      volumes:
      - name: ssl-certs
        secret:
          secretName: demo-app-tls
          items:
          - key: tls.crt
            path: tls.crt
      - name: ssl-keys
        secret:
          secretName: demo-app-tls
          items:
          - key: tls.key
            path: tls.key
      - name: secrets-store
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: aws-secrets
      imagePullSecrets:
        - name: regcred
---
apiVersion: v1
kind: Service
metadata:
  name: demo-app
spec:
  selector:
    app: demo-app
  ports:
    - protocol: TCP
      port: 443
      targetPort: 8443
      name: https
  type: LoadBalancer
---
# HorizontalPodAutoscaler (HPA) Configuration
# This configuration automatically scales the number of pods based on resource utilization:
# - Scales between 3 and 10 pods
# - Triggers scaling when CPU usage exceeds 70% of the limit
# - Triggers scaling when memory usage exceeds 80% of the limit
# - Helps maintain application performance during high load
# - Optimizes resource usage during low demand periods
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: demo-app-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: demo-app
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: demo-app-pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: demo-app
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: demo-app-network-policy
spec:
  podSelector:
    matchLabels:
      app: demo-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: frontend
    ports:
    - protocol: TCP
      port: 8443
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: database
    ports:
    - protocol: TCP
      port: 5432
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: demo-app-sa
